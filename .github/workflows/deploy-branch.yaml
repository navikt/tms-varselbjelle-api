name: Deploy branch

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Target for deploy'
        required: true
        default: 'dev-gcp'
        type: choice
        options:
          - dev-gcp
          - prod-gcp

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:

      - name: 'Sjekk ut koden for dette repo-et'
        uses: 'actions/checkout@v2'
        with:
          FETCH-DEPTH: '0'

      - name: 'Utled navn på tag og docker-image basert på siste commit'
        run: |
          APP_NAME=$(echo $GITHUB_REPOSITORY | rev | cut -f1 -d"/" | rev )
          TAG_NAME="$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(git log -1 --pretty='%h')"
          IMAGE_BASE="ghcr.io/$GITHUB_REPOSITORY/$APP_NAME"
          echo "IMAGE_FULL_NAME=$IMAGE_BASE:$TAG_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: 'Sjekker om docker-image eksisterer fra før av'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_REPOSITORY --password-stdin
          RESULT=$(docker manifest inspect ${{ env.IMAGE_FULL_NAME }} > /dev/null ; echo $?)
          echo "IMAGE_EXISTS=$([[ $RESULT == 0 ]] && echo 'true' || echo 'false' )" >> $GITHUB_ENV

  build-docker-image:
    needs: setup
    if: env.IMAGE_EXISTS == 'false'
    runs-on: ubuntu-latest
    steps:

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: '17.x'

      - name: Bygg prosjekt
        uses: navikt/pb-common-gh-actions/build@v2
        with:
          SKIP_TESTS: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bygg, tag og push Docker image
        uses: navikt/pb-common-gh-actions/docker-publish@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG_NAME }}

  deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: 'Deploy-er til ${{ inputs.cluster }}'
        uses: 'nais/deploy/actions/deploy@v1'
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ./nais/${{ inputs.cluster }}/nais.yaml
          VAR: version=${{ env.IMAGE }}
          PRINT_PAYLOAD: true
          REF: ${{ env.CURRENT_REF }}
