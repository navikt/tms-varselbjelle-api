name: Deploy branch

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Target for deploy'
        required: true
        default: 'dev-gcp'
        type: choice
        options:
          - dev-gcp
          - prod-gcp

jobs:
  prepare-docker-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.IMAGE_FULL_NAME }}
    steps:

      - name: 'Sjekk ut koden for dette repo-et'
        uses: 'actions/checkout@v3'

      - name: 'Utled navn på tag og docker-image basert på siste commit'
        run: |
          APP_NAME=$(echo $GITHUB_REPOSITORY | rev | cut -f1 -d"/" | rev )
          TAG_NAME="$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(git log -1 --pretty='%h')"
          IMAGE_BASE="ghcr.io/$GITHUB_REPOSITORY/$APP_NAME"
          echo "IMAGE_FULL_NAME=$IMAGE_BASE:$TAG_NAME" >> $GITHUB_ENV

      - name: 'Sjekker om docker-image eksisterer fra før av'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_REPOSITORY --password-stdin
          RESULT=$(docker manifest inspect ${{ env.IMAGE_FULL_NAME }} > /dev/null 2> /dev/null ; echo $?)
          echo "IMAGE_EXISTS=$([[ $RESULT == 0 ]] && echo 'true' || echo 'false' )" >> $GITHUB_ENV

      - uses: actions/setup-java@v3
        if: env.IMAGE_EXISTS == 'false'
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/gradle-build-action@v2
        if: env.IMAGE_EXISTS == 'false'
        with:
          arguments: --configuration-cache build installDist

      - name: Bygg, tag og push Docker image
        if: env.IMAGE_EXISTS == 'false'
        run: |
          docker build --tag ${{ env.IMAGE_FULL_NAME }} .
          docker push ${{ env.IMAGE_FULL_NAME }}

  deploy:
    needs: prepare-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 'Deploy-er til ${{ inputs.cluster }}'
        uses: 'nais/deploy/actions/deploy@v1'
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ./nais/${{ inputs.cluster }}/nais.yaml
          VAR: version=${{ needs.prepare-docker-image.outputs.image }}
          PRINT_PAYLOAD: true
          REF: ${{ env.CURRENT_REF }}
